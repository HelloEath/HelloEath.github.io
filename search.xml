<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>&#39;看《周处除三害》&#39;</title>
      <link href="/2024/03/06/%E7%9C%8B%E3%80%8A%E5%91%A8%E5%A4%84%E9%99%A4%E4%B8%89%E5%AE%B3%E3%80%8B/"/>
      <url>/2024/03/06/%E7%9C%8B%E3%80%8A%E5%91%A8%E5%A4%84%E9%99%A4%E4%B8%89%E5%AE%B3%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>电影讲的是身患肺癌晚期时日无多的落魄阳光开朗大男孩受到关公指点，痛改前非，想要名留青史，从而单击公安通缉犯人员榜单前二榜一榜二的事件。</p><p>曾经 我茫然前行，<br>黯夜的路上，<br>微风  刺痛著灵魂，<br>找不到应该的方向，<br>生命这样的旅程，<br>要用多少泪水来完整，<br>是否我能期待遥远天际，<br>一起飞翔 新造的人，<br>生命这样的旅程，<br>我渴求你的微笑来完整，<br>你能为我打开自由的门，<br>牵起手吧 新造的人，<br>你看  它白色的翅膀，<br>耀眼而无暇，<br>我们  平凡的灵魂，<br>紧紧跟随不需多想，<br>生命这样的旅程，<br>要用多少泪水来完整，<br>是否我能期待遥远天际，<br>一起飞翔 新造的人。</p><p>《周处除三害》源自《晋书》之《周处传》，是一则民间故事。讲的是地方太守的儿子周处，飞扬跋扈，无恶不作。而当时山上恰有一个吃人不吐骨头的老虎，河里也有一个经常扰船的蛟龙。于是，老百姓便把周处，恶虎，以及恶龙合称为地方上的“三大害”！有一天周处忽然做梦梦见一白胡子老头指点，于是他痛改前非，想要好好做人！于是他经过一番九死一生的恶斗替老百姓除掉了恶虎和恶龙，而他自身也变成了善人，受到人们的称颂。就这样所谓的“三害”就消失了。显然电影里的陈桂林就是周处，他在除掉排名第一和第二的通缉犯后也完成了自己的救赎，所以与周处除三害如出一辙！只是可惜的是民间故事里的周处活了下来，而电影里的陈桂林却不得不死！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;iOS添加各地区节假日日历&#39;</title>
      <link href="/2024/03/05/iOS%E6%B7%BB%E5%8A%A0%E5%90%84%E5%9C%B0%E5%8C%BA%E8%8A%82%E5%81%87%E6%97%A5%E6%97%A5%E5%8E%86/"/>
      <url>/2024/03/05/iOS%E6%B7%BB%E5%8A%A0%E5%90%84%E5%9C%B0%E5%8C%BA%E8%8A%82%E5%81%87%E6%97%A5%E6%97%A5%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>iOS一般都会自带默认地区的节假日日历，例如国行版本自带中国大陆节假日日历（2022年已经有调休信息）。</p><p>下面介绍其他国家地区的日历订阅方法（如果只有iPhone：设置——邮件——账户——添加账户——其他——添加已订阅的日历。如果还有MacOS，则推荐在MacOS的日历——文件——新建日历订阅中添加，这样可以通过iCloud同步到iOS），参考来自<a href="https://chesblog.com/2019/03/28/APPLE%E5%AE%98%E6%96%B9%E6%97%A5%E5%8E%86%E8%AE%A2%E9%98%85%E5%9C%B0%E5%9D%80/">Che’s Blog</a>的文章，并实测有效：</p><p>香港 （ 显示为： <strong>香港公众假期</strong>。香港政府官方链接）：&#96;&#96;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.1823.gov.hk/common/ical/sc.ics</span><br></pre></td></tr></table></figure><p>台湾 （ 显示为： <strong>台湾节日</strong>） ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webcal://p10-calendars.icloud.com/holiday/TW_zh.ics</span><br></pre></td></tr></table></figure><p>美国（显示为：<strong>US Holidays</strong>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webcal://p10-calendars.icloud.com/holiday/US_en.ics</span><br></pre></td></tr></table></figure><p>日本 （显示为：<strong>日本の祝日</strong>） ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webcal://p10-calendars.icloud.com/holiday/JP_ja.ics</span><br></pre></td></tr></table></figure><p>澳大利亚（ 显示为： <strong>Australian Holidays</strong>）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webcal://p10-calendars.icloud.com/holiday/AU_en.ics</span><br></pre></td></tr></table></figure><p>新加坡 （ 显示为： <strong>新加坡节假日</strong>） ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webcal://p10-calendars.icloud.com/holiday/SG_zh.ics </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> IOS，假日日历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;网络编程懒人入门(二)：快速理解网络通信协议（下篇）&#39;</title>
      <link href="/2024/02/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%87%92%E4%BA%BA%E5%85%A5%E9%97%A8-%E4%BA%8C-%EF%BC%9A%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/"/>
      <url>/2024/02/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%87%92%E4%BA%BA%E5%85%A5%E9%97%A8-%E4%BA%8C-%EF%BC%9A%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>本文上篇 [网络编程懒人入门(一)：快速理解网络通信协议（上篇）]分析了互联网的总体构思，从下至上，每一层协议的设计思想。基于知识连贯性的考虑，建议您先看完上篇后再来阅读本文。</p><p>本文从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。</p><h2 id="2、一个小结"><a href="#2、一个小结" class="headerlink" title="2、一个小结"></a>2、一个小结</h2><p>先对前面的内容，做一个小结（详见本文上篇《网络编程懒人入门(一)：快速理解网络通信协议（上篇）》）。</p><p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。</p><p><strong>数据包的结构，基本上是下面这样：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/153041d3j4w47j4b3t4ddj.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_1.jpg"></p><p><strong>发送这个包，需要知道两个地址：</strong></p><ul><li>* 对方的MAC地址；</li><li>* 对方的IP地址。</li></ul><p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152820u6z2sszklszy5fok.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_2.jpg"></p><p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p><p><strong>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</strong></p><table><thead><tr><th><strong>场景</strong></th><th><strong>数据包地址</strong></th></tr></thead><tbody><tr><td>同一个子网络</td><td>对方的MAC地址，对方的IP地址</td></tr><tr><td>非同一个子网络</td><td>网关的MAC地址，对方的IP地址</td></tr></tbody></table><p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p><h2 id="3、用户的上网设置"><a href="#3、用户的上网设置" class="headerlink" title="3、用户的上网设置"></a>3、用户的上网设置</h2><h3 id="3-1静态IP地址"><a href="#3-1静态IP地址" class="headerlink" title="3.1静态IP地址"></a>3.1静态IP地址</h3><p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152807f1aaauaa7uys8oyo.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_3.jpg"></p><p><strong>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</strong></p><ul><li>* 本机的IP地址；</li><li>* 子网掩码；</li><li>* 网关的IP地址；</li><li>* DNS的IP地址。</li></ul><p><strong>下图是Windows系统的设置窗口：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152802kp9pgzo0144n9af4.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_4.jpg"></p><p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作”静态IP地址上网”。但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用”动态IP地址上网”。</p><h3 id="3-2动态IP地址"><a href="#3-2动态IP地址" class="headerlink" title="3.2动态IP地址"></a>3.2动态IP地址</h3><p>所谓”动态IP地址”，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做DHCP协议。</p><p>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做”DHCP服务器”。新的计算机加入网络，必须向”DHCP服务器”发送一个”DHCP请求”数据包，申请IP地址和相关的网络参数。</p><p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？DHCP协议做了一些巧妙的规定。</p><h3 id="3-3DHCP协议"><a href="#3-3DHCP协议" class="headerlink" title="3.3DHCP协议"></a>3.3DHCP协议</h3><p><strong>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/153032wppxuuvdmupaqiy6.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_5.jpg"></p><ul><li><strong>1）最前面的”以太网标头”：</strong>设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</li><li><strong>2）后面的”IP标头”：</strong>设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</li><li><strong>3）最后的”UDP标头”：</strong>设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</li></ul><p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道”这个包是发给我的”，而其他计算机就可以丢弃这个包。</p><p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个”DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p><p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p><h3 id="3-4上网设置：小结"><a href="#3-4上网设置：小结" class="headerlink" title="3.4上网设置：小结"></a>3.4上网设置：小结</h3><p>这个部分，需要记住的就是一点：不管是”静态IP地址”还是”动态IP地址”，电脑上网的首要步骤，是确定四个参数。</p><p><strong>这四个值很重要，值得重复一遍：</strong></p><ul><li>* 本机的IP地址；</li><li>* 子网掩码；</li><li>* 网关的IP地址；</li><li>* DNS的IP地址。</li></ul><p>有了这几个数值，电脑就可以上网”冲浪”了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p><h2 id="4、一个实例：访问网页"><a href="#4、一个实例：访问网页" class="headerlink" title="4、一个实例：访问网页"></a>4、一个实例：访问网页</h2><h3 id="4-1本机参数"><a href="#4-1本机参数" class="headerlink" title="4.1本机参数"></a>4.1本机参数</h3><p><strong>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</strong></p><ul><li>* 本机的IP地址：192.168.1.100；</li><li>* 子网掩码：255.255.255.0；</li><li>* 网关的IP地址：192.168.1.1；</li><li>* DNS的IP地址：8.8.8.8。</li></ul><p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：<a href="http://www.google.com/">www.google.com</a>。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152757ml7lls7da6llntnh.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_6.jpg"></p><p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p><h3 id="4-2DNS协议"><a href="#4-2DNS协议" class="headerlink" title="4.2DNS协议"></a>4.2DNS协议</h3><p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址<a href="http://www.google.com/">www.google.com</a>，不知道它的IP地址。DNS协议可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152943saacxdsazs2x2c7x.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_7.jpg"></p><p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p><h3 id="4-3子网掩码"><a href="#4-3子网掩码" class="headerlink" title="4.3子网掩码"></a>4.3子网掩码</h3><p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p><p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p><p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p><h3 id="4-4应用层协议"><a href="#4-4应用层协议" class="headerlink" title="4.4应用层协议"></a>4.4应用层协议</h3><p><strong>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152959qwuepu61p36qpu5l.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_8.jpg"></p><p><strong>HTTP部分的内容，类似于下面这样：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1``Host: [url=http://www.google.com]www.google.com[/url]``Connection: keep-alive``User-Agent: Mozilla/5.0 (Windows NT 6.1) ......``Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8``Accept-Encoding: gzip,deflate,sdch``Accept-Language: zh-CN,zh;q=0.8``Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3``Cookie: ... ...</span><br></pre></td></tr></table></figure><p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p><h3 id="4-5TCP协议"><a href="#4-5TCP协议" class="headerlink" title="4.5TCP协议"></a>4.5TCP协议</h3><p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p><h3 id="4-6IP协议"><a href="#4-6IP协议" class="headerlink" title="4.6IP协议"></a>4.6IP协议</h3><p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p><h3 id="4-7以太网协议"><a href="#4-7以太网协议" class="headerlink" title="4.7以太网协议"></a>4.7以太网协议</h3><p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p><p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152701ig00c96izody9qz9.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_9.jpg"></p><h3 id="4-8服务器端响应"><a href="#4-8服务器端响应" class="headerlink" title="4.8服务器端响应"></a>4.8服务器端响应</h3><p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的”HTTP请求”，接着做出”HTTP响应”，再用TCP协议发回来。</p><p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/152656c0hig7tpczgyozco.jpg" alt="网络编程懒人入门(二)：快速理解网络通信协议（下篇）_10.jpg"></p><p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p><blockquote><p>本文转载自 <a href="http://www.52im.net/thread-1103-1-1.html">网络编程懒人入门(二)：快速理解网络通信协议（下篇）-网络编程&#x2F;专项技术区 - 即时通讯开发者社区! (52im.net)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;网络编程懒人入门(一)：快速理解网络通信协议（上篇）&#39;</title>
      <link href="/2024/02/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%87%92%E4%BA%BA%E5%85%A5%E9%97%A8-%E4%B8%80-%EF%BC%9A%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/"/>
      <url>/2024/02/21/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%87%92%E4%BA%BA%E5%85%A5%E9%97%A8-%E4%B8%80-%EF%BC%9A%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1、正文引言"><a href="#1、正文引言" class="headerlink" title="1、正文引言"></a>1、正文引言</h2><p>我们每天使用互联网，你是否想过，它是如何实现的？</p><p>全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？</p><p>互联网的核心是一系列协议，总称为”互联网协议”（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p><p>下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p><h2 id="2、内容概述"><a href="#2、内容概述" class="headerlink" title="2、内容概述"></a>2、内容概述</h2><h3 id="2-1五层模型"><a href="#2-1五层模型" class="headerlink" title="2.1五层模型"></a>2.1五层模型</h3><p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p><p><strong>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150735oly7l6bu5cffff7h.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_1.jpg"></p><p>如上图所示，最底下的一层叫做”实体层”（Physical Layer），最上面的一层叫做”应用层”（Application Layer），中间的三层（自下而上）分别是”链接层”（Link Layer）、”网络层”（Network Layer）和”传输层”（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p><p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p><h3 id="2-2层与协议"><a href="#2-2层与协议" class="headerlink" title="2.2层与协议"></a>2.2层与协议</h3><p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。大家都遵守的规则，就叫做”协议”（protocol）。</p><p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p><h2 id="3、实体层"><a href="#3、实体层" class="headerlink" title="3、实体层"></a>3、实体层</h2><p>我们从最底下的一层开始。</p><p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150746ayctvzgmgiitegir.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_2.jpg"></p><p>这就叫做”实体层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</p><h2 id="4、链接层"><a href="#4、链接层" class="headerlink" title="4、链接层"></a>4、链接层</h2><h3 id="4-1定义"><a href="#4-1定义" class="headerlink" title="4.1定义"></a>4.1定义</h3><p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p><p>这就是”链接层”的功能，它在”实体层”的上方，确定了0和1的分组方式。</p><h3 id="4-2以太网协议"><a href="#4-2以太网协议" class="headerlink" title="4.2以太网协议"></a>4.2以太网协议</h3><p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做”以太网”（Ethernet）的协议，占据了主导地位。</p><p>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150929cw8a20dzzlonkene.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_3.jpg"></p><p>“标头”包含数据包的一些说明项，比如发送者、接受者、数据类型等等；”数据”则是数据包的具体内容。</p><p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p><h3 id="4-3MAC地址"><a href="#4-3MAC地址" class="headerlink" title="4.3MAC地址"></a>4.3MAC地址</h3><p>上面提到，以太网数据包的”标头”，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p><p>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150804rssezzhyddhqqlxt.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_4.jpg"></p><p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150918zzkluk96tufsl3bs.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_5.jpg"></p><p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p><h3 id="4-4广播"><a href="#4-4广播" class="headerlink" title="4.4广播"></a>4.4广播</h3><p><strong>定义地址只是第一步，后面还有更多的步骤：</strong></p><ul><li>*<strong>1）*首先：</strong>一块网卡怎么会知道另一块网卡的MAC地址？<br>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</li><li>*<strong>2）*其次：</strong>就算有了MAC地址，系统怎样才能把数据包准确送到接收方？<br>回答是以太网采用了一种很”原始”的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</li></ul><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150935p07k2g2y6y7k74e0.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_6.jpg"></p><p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做”广播”（broadcasting）。</p><p>有了数据包的定义、网卡的MAC地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p><h2 id="5、网络层"><a href="#5、网络层" class="headerlink" title="5、网络层"></a>5、网络层</h2><h3 id="5-1网络层的由来"><a href="#5-1网络层的由来" class="headerlink" title="5.1网络层的由来"></a>5.1网络层的由来</h3><p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p><p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是不合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p><p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150940oh5ihxuuhlzxot64.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_7.jpg"></p><p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p><p>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做”网络地址”，简称”网址”。</p><p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p><p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p><h3 id="5-2IP协议"><a href="#5-2IP协议" class="headerlink" title="5.2IP协议"></a>5.2IP协议</h3><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。目前，广泛采用的是IP协议第四版，简称IPv4。<br><strong>IPv4这个版本规定，网络地址由32个二进制位组成：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150947elp4lvaiiesuvlyu.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_8.jpg"></p><p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p><p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p><p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p><p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p><p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p><p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p><p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p><p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p><h3 id="5-3IP数据包"><a href="#5-3IP数据包" class="headerlink" title="5.3IP数据包"></a>5.3IP数据包</h3><p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p><p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p><p><strong>具体来说，IP数据包也分为”标头”和”数据”两个部分：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/150954xykms5d9vscynnsz.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_9.jpg"></p><p>“标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样：</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/151007ibebhdrudjqof1qp.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_10.jpg"></p><p>IP数据包的”标头”部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的”数据”部分，最长为65,515字节。前面说过，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p><h3 id="5-4ARP协议"><a href="#5-4ARP协议" class="headerlink" title="5.4ARP协议"></a>5.4ARP协议</h3><p>关于”网络层”，还有最后一点需要说明。因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p><p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p><p><strong>这里又可以分成两种情况：</strong></p><ul><li>*<strong>1）*第一种情况：</strong>如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的”网关”（gateway），让网关去处理；</li><li>*<strong>2）*第二种情况：</strong>如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</li></ul><p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p><h2 id="6、传输层"><a href="#6、传输层" class="headerlink" title="6、传输层"></a>6、传输层</h2><h3 id="6-1传输层的由来"><a href="#6-1传输层的由来" class="headerlink" title="6.1传输层的由来"></a>6.1传输层的由来</h3><p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p><p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p><p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p><p>“端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p><p>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。</p><h3 id="6-2UDP协议"><a href="#6-2UDP协议" class="headerlink" title="6.2UDP协议"></a>6.2UDP协议</h3><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p><p><strong>UDP数据包，也是由”标头”和”数据”两部分组成：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/151048jboz0nm3kommnbim.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_11.jpg"></p><p>“标头”部分主要定义了发出端口和接收端口，”数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的”数据”部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/151011eysfi272f6nveevs.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_12.jpg"></p><p>UDP数据包非常简单，”标头”部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p><h3 id="6-3TCP协议"><a href="#6-3TCP协议" class="headerlink" title="6.3TCP协议"></a>6.3TCP协议</h3><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p><p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p><p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p><h2 id="7、应用层"><a href="#7、应用层" class="headerlink" title="7、应用层"></a>7、应用层</h2><p>应用程序收到”传输层”的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。”应用层”的作用，就是规定应用程序的数据格式。</p><p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了”应用层”。这是最高的一层，直接面对用户。它的数据就放在TCP数据包的”数据”部分。</p><p><strong>因此，现在的以太网的数据包就变成下面这样：</strong></p><p><img src="http://www.52im.net/data/attachment/forum/201811/01/151016iaeia7apeacny25l.jpg" alt="网络编程懒人入门(一)：快速理解网络通信协议（上篇）_13.jpg"></p><h2 id="8、本文小结"><a href="#8、本文小结" class="headerlink" title="8、本文小结"></a>8、本文小结</h2><p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇《网络编程懒人入门(二)：快速理解网络通信协议（下篇）》，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。敬请期待</p><blockquote><p>本文转载自 <a href="http://www.52im.net/thread-1095-1-1.html">网络编程懒人入门(一)：快速理解网络通信协议（上篇）-网络编程&#x2F;专项技术区 - 即时通讯开发者社区! (52im.net)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&#39;从0到1搭建自己的hexo博客&#39;</title>
      <link href="/2024/02/19/%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/02/19/%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本文旨在让大家学会从 0 开始搭建一个属于自己的静态博客网站，使用 Hexo 博客框架搭建并部署到 Github，让您可以在不用购买云服务器的情况下拥有一个属于自己的博客网站。</p><hr><p>Hexo 介绍:</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://link.zhihu.com/?target=http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>Hexo 官方中文网站: <a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/index.html">Hexo</a></p><h2 id="第一章-前期准备"><a href="#第一章-前期准备" class="headerlink" title="第一章 前期准备"></a><strong>第一章 前期准备</strong></h2><h3 id="1-1-安装前所需环境介绍"><a href="#1-1-安装前所需环境介绍" class="headerlink" title="1.1 安装前所需环境介绍"></a><strong>1.1 安装前所需环境介绍</strong></h3><p>安装 Hexo 之前，需要确保您的 PC 中已经安装以下工具:</p><ul><li>Node.js [地址: <a href="https://link.zhihu.com/?target=https://nodejs.org/en/">Node.js (nodejs.org)</a>]</li><li>Git [地址: <a href="https://link.zhihu.com/?target=https://git-scm.com/">Git (git-scm.com)</a>]</li></ul><p>如果您的电脑已经具备所需工具，那么您可以直接进入第二章开始安装 Hexo 了。</p><p>如果您还未安装这两款工具，那么请按照以下步骤进行安装。</p><h3 id="1-2-安装-Git"><a href="#1-2-安装-Git" class="headerlink" title="1.2 安装 Git"></a><strong>1.2 安装 Git</strong></h3><ul><li>官方下载地址: <a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></li><li>安装与使用: 详情见 Git 笔记(尚未写出)</li><li>注意事项: 建议选择 64-bit Git for Windows Setup，并且安装时要勾选 <strong>Add to PATH</strong> 选项</li></ul><p><img src="https://pic2.zhimg.com/80/v2-c5de3b1f7c5db0fbd4049d9a0c874d4d_720w.webp" alt="img"></p><ul><li>安装后验证: 在 cmd 中输入命令 <code>git --version</code>, 查看 Git 版本</li></ul><p><img src="https://pic1.zhimg.com/80/v2-7306f8448cc07ec9d0801f155e1b1a20_720w.webp" alt="img"></p><h3 id="1-3-安装-Node-js"><a href="#1-3-安装-Node-js" class="headerlink" title="1.3 安装 Node.js"></a><strong>1.3 安装 Node.js</strong></h3><ul><li>官方下载地址: <a href="https://link.zhihu.com/?target=https://nodejs.org/en/">Node.js (nodejs.org)</a></li><li>安装与使用: 详情见 Node 笔记(尚未写出)</li><li>注意事项: 使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</li></ul><p><img src="https://pic1.zhimg.com/80/v2-ea56f3bab545202a4f0a6a6a11a5af20_720w.webp" alt="img"></p><ul><li>安装后验证: 在 cmd 中输入命令 <code>node -v</code>, 查看 Node 版本</li></ul><p><img src="https://pic3.zhimg.com/80/v2-1d36d0db185303a37362f33090d13b2a_720w.webp" alt="img"></p><hr><p>至此，您已经完成了安装 Hexo 所需的所有额外环境，接下来就可以安装 Hexo 了。</p><h2 id="第二章-安装-Hexo"><a href="#第二章-安装-Hexo" class="headerlink" title="第二章 安装 Hexo"></a><strong>第二章 安装 Hexo</strong></h2><h3 id="2-1-安装-cnpm"><a href="#2-1-安装-cnpm" class="headerlink" title="2.1 安装 cnpm"></a><strong>2.1 安装 cnpm</strong></h3><p>当您安装 Node.js 之后，便可以在命令行中通过 node install 命令安装您想要的程序了。但本文推荐使用 cnpm 安装 Hexo，所以需要先通过 npm install 安装 cnpm。</p><ul><li>命令: <code>npm install -g cnpm --registry==https://registry.npm.taobao.org</code><br>说明: -g 表示进行全局安装，–registry&#x3D;&#x3D;<a href="https://link.zhihu.com/?target=https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 表示使用淘宝镜像安装 cnpm</li><li>安装后验证: 在 cmd 中输入命令 cnpm -v, 可查看 cnpm 版本</li></ul><p><img src="https://pic1.zhimg.com/80/v2-4a4d5d6ee394b06c85ed541f7eca9824_720w.webp" alt="img"></p><h3 id="2-2-安装-Hexo"><a href="#2-2-安装-Hexo" class="headerlink" title="2.2 安装 Hexo"></a><strong>2.2 安装 Hexo</strong></h3><ul><li>命令: <code>cnpm install -g hexo-cli</code><br>说明: -g 表示全局安装，hexo-cli 为所安装的包</li><li>安装后验证: 在 cmd 中输入命令 hexo -v, 可查看 hexo 版本</li></ul><p><img src="https://pic2.zhimg.com/80/v2-482729ea2fce677d33e5ecfc78d67a79_720w.webp" alt="img"></p><h3 id="2-3-注意事项"><a href="#2-3-注意事项" class="headerlink" title="2.3 注意事项"></a><strong>2.3 注意事项</strong></h3><p>建议永远安装最新版本的 Hexo，以及 <a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/docs/index.html%23%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th>Hexo 版本</th><th>最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td>6.0+</td><td>12.13.0</td></tr><tr><td>5.0+</td><td>10.13.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td></tr><tr><td>4.0</td><td>8.6</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td></tr></tbody></table><hr><p>至此，您已成成功安装了 Hexo，接下来进入 Github 的配置吧!</p><h2 id="第三章-配置-Github"><a href="#第三章-配置-Github" class="headerlink" title="第三章 配置 Github"></a><strong>第三章 配置 Github</strong></h2><p>如果您还没有 Gihub 账户，请注册一个 Github 账户吧!</p><h3 id="3-1-在-Github-上创建仓库"><a href="#3-1-在-Github-上创建仓库" class="headerlink" title="3.1 在 Github 上创建仓库"></a><strong>3.1 在 Github 上创建仓库</strong></h3><ul><li>新建一个名为: <a href="https://link.zhihu.com/?target=http://username.github.io">http://username.github.io</a> 的仓库(username 为您的 Github 用户名)</li><li>比如，如果您的 github 用户名是 test，那么您就新建名为 <a href="https://link.zhihu.com/?target=http://test.github.io">http://test.github.io</a> 的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://link.zhihu.com/?target=https://test.github.io/">https://test.github.io</a> 了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</li></ul><p><img src="https://pic4.zhimg.com/80/v2-c7717b4f019e3c9bcd747627419acddb_720w.webp" alt="img"></p><ul><li>注意事项:<br>注册的邮箱一定要验证，否则不会成功;<br>仓库名字必须是：<a href="https://link.zhihu.com/?target=http://username.github.io">http://username.github.io</a>，其中 username 是你的用户名;<br>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久</li></ul><h3 id="3-2-配置-SSH-免密登录"><a href="#3-2-配置-SSH-免密登录" class="headerlink" title="3.2 配置 SSH 免密登录"></a><strong>3.2 配置 SSH 免密登录</strong></h3><p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。</p><p><strong>注:</strong> 如果您已经配置过 SSH，可跳过此步骤</p><p><strong>步骤:</strong></p><p>1、首先打开电脑文件夹，找到 C:\Users\您的用户名\ .ssh文件夹并删除(如果没有，则直接进入第二步)</p><p>2、在 C:\Users\您的用户名 文件夹下右键打开 Git Bash Here 输入命令: <code>ssh-keygen -t rsa -C &quot;你的github登录邮箱&quot;</code> 生成.ssh秘钥，输入后连敲三次回车，出现下图情况代表成功</p><p><img src="https://pic1.zhimg.com/80/v2-aec18bbfd3399e194b9172da629d9bbc_720w.webp" alt="img"></p><p>3、生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p><p>4、打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填，保存即可，我们的公钥就添加成功了，设置好如下图:</p><p><img src="https://pic4.zhimg.com/80/v2-6494b25443fd0a9a261c19c84524b867_720w.webp" alt="img"></p><p>5、检测是否设置成功:</p><p>输入命令: <code>ssh -T git@github.com</code></p><p><img src="https://pic4.zhimg.com/80/v2-f506c4b968e6c52cd43211f1b584b5d7_720w.webp" alt="img"></p><p>看到以上信息说明 SSH 已配置成功!</p><p>6、此外您还需要如下配置:</p><p>命令: <code>git config --global user.name &quot;您的 Github username&quot;</code> &#x2F;&#x2F; 注意是 username, 而非昵称</p><p>命令: <code>git config --global user.email &quot;xxx@qq.com&quot;</code> &#x2F;&#x2F; 填写您的 github 注册邮箱</p><hr><p>至此，您已经成功配置好了 Github，接下来开始搭建个人博客吧!</p><h2 id="第四章-使用-Hexo-搭建博客"><a href="#第四章-使用-Hexo-搭建博客" class="headerlink" title="第四章 使用 Hexo 搭建博客"></a><strong>第四章 使用 Hexo 搭建博客</strong></h2><h3 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a><strong>4.1 初始化</strong></h3><p>1、在电脑的某个磁盘或路径新建一个名为 hexo 的文件夹(名字可以随便取)，比如我的是 D:\hexo，由于这个文件夹将来就作为您存放代码的地方，所以最好不要随便放</p><p>2、在 D:\hexo 文件夹下右键打开 Git Bash Here，输入命令: <code>hexo init</code> 进行初始化</p><p><img src="https://pic1.zhimg.com/80/v2-61f722bf8bed5ae2eb6d5c8e7d55d71c_720w.webp" alt="img"></p><ul><li>hexo 会自动下载一些文件到这个目录，包括 node_modules，目录结构如下图:</li></ul><p><img src="https://pic2.zhimg.com/80/v2-7d8b10608de25181e9ab19e463056f91_720w.webp" alt="img"></p><p>3、执行命令: <code>hexo g</code> 会在 public 文件夹下生成相关的 html 文件，这些文件将来需要提交到 Github 上</p><p>4、执行命令: <code>hexo s</code> 可以开启本地预览服务，打开浏览器访问 <a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000</a> 即可看到博客内容</p><h3 id="4-2-将博客部署到-Github"><a href="#4-2-将博客部署到-Github" class="headerlink" title="4.2 将博客部署到 Github"></a><strong>4.2 将博客部署到 Github</strong></h3><p>1、在 D:\hexo 目录下安装 hexo-deployer-git 插件</p><ul><li>命令: <code>npm install hexo-deployer-git --save</code></li></ul><p>2、编辑 D:\hexo 目录下的 _config.yml 文件，在文件末尾添加如下内容:</p><p><img src="https://pic2.zhimg.com/80/v2-4ab624f2b39b37bf524e37f997bea1d9_720w.webp" alt="img"></p><ul><li>注意: 其中 repository 中的内容即为 github 个人主页链接地址</li></ul><p><img src="https://pic4.zhimg.com/80/v2-6e9c1e5d13323fc25738fe344fa97f5f_720w.webp" alt="img"></p><p>3、在 D:\hexo 目录下，输入命令: <code>hexo d</code> 将本地 blog 推送到 github 远程仓库，也可能需要输入 username &amp; pwd</p><p>推送成功后，即可通过 <a href="https://link.zhihu.com/?target=https://jzhangcser01.github.io/">https://jzhangcser01.github.io/</a> 访问个人博客了!</p><hr><p>至此，您已经会使用 Hexo 搭建博客了，但是您会发现此时访问博客主页，页面很不美观，那么接下来就对您的博客进行美化吧!</p><h2 id="第五章-更换主题"><a href="#第五章-更换主题" class="headerlink" title="第五章 更换主题"></a><strong>第五章 更换主题</strong></h2><p>在 D:\hexo 目录下有一个 themes 文件夹，该文件夹下存放着 hexo 所使用的主题</p><h3 id="5-1-搜索主题"><a href="#5-1-搜索主题" class="headerlink" title="5.1 搜索主题"></a><strong>5.1 搜索主题</strong></h3><ul><li>hexo 官方提供了很多主题供我们使用，地址: <a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes | Hexo</a>, 选择喜欢的主题并点击即可跳转至 github</li><li>笔者使用了 github 上面一个大佬制作的主题，地址: <a href="https://link.zhihu.com/?target=https://github.com/JoeyBling/hexo-theme-yilia-plus">JoeyBling&#x2F;hexo-theme-yilia-plus: 一个简洁优雅的hexo主题 A simple and elegant theme for hexo. (github.com)</a></li><li>您可以在 github 中直接搜索 hexo 主题</li></ul><h3 id="5-2-下载主题"><a href="#5-2-下载主题" class="headerlink" title="5.2 下载主题"></a><strong>5.2 下载主题</strong></h3><p>1、在 D:\hexo 目录下右键 Git Bash Here</p><p>2、执行命令: <code>git clone 主题http链接 themes/主题名称</code> 将主题下载至 themes 文件夹下</p><p><img src="https://pic4.zhimg.com/80/v2-4e26c354d6b1105dee9a8e380c3107a3_720w.webp" alt="img"></p><ul><li>可以在该文件夹下查看是否下载成功</li></ul><p><img src="https://pic4.zhimg.com/80/v2-ff800766f9f137484922c2861772c8ef_720w.webp" alt="img"></p><h3 id="5-3-使用主题"><a href="#5-3-使用主题" class="headerlink" title="5.3 使用主题"></a><strong>5.3 使用主题</strong></h3><ul><li>打开 D:\hexo 目录下的 _config.yml 文件，在里面找到 theme: landscape改为theme: yilia-plus(yilia-plus为我们要使用的主题名)，然后执行 <code>hexo clean</code> 先删除旧的 html 文件，再执行 <code>hexo g</code> 重新生成，再执行 <code>hexo d</code> 推送到远程仓库</li></ul><p><img src="https://pic1.zhimg.com/80/v2-618b52691dd94f55ff335b1d7ec129c0_720w.webp" alt="img"></p><ul><li>在浏览器输入相应域名，发现主题已更换</li><li>注意: 可能需要等一段时间刷新才更换 please be patient</li></ul><h3 id="5-4-修改主题内容"><a href="#5-4-修改主题内容" class="headerlink" title="5.4 修改主题内容"></a><strong>5.4 修改主题内容</strong></h3><p>您可以在 themes&#x2F;yilia-plus 文件夹中查看该主题的内容，并可编辑该文件夹中的 _config.yml 文件修改主题样式</p><p><img src="https://pic1.zhimg.com/80/v2-48941ca9721f77d183f00880872486f0_720w.webp" alt="img"></p><ul><li>注意: 记得编辑根目录下的 _config.yml 文件，将信息修改为自己的</li></ul><p><img src="https://pic4.zhimg.com/80/v2-fd72d0475c648212c2423d35274b06e3_720w.webp" alt="img"></p><h2 id="第六章-使用-Typora-编写博客"><a href="#第六章-使用-Typora-编写博客" class="headerlink" title="第六章 使用 Typora 编写博客"></a><strong>第六章 使用 Typora 编写博客</strong></h2><h3 id="6-1-Typora-介绍"><a href="#6-1-Typora-介绍" class="headerlink" title="6.1 Typora 介绍"></a><strong>6.1 Typora 介绍</strong></h3><p>Typora 是一款轻便简洁的 Markdown 编辑器，支持即时渲染技术，这也是与其他 Markdown 编辑器最显著的区别。即时渲染使得你写Markdown 就像是写 Word 文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><p>优点:</p><ul><li><strong>简洁美观</strong></li><li><strong>实时预览</strong></li><li><strong>扩展语法</strong></li><li><strong>跨平台</strong></li></ul><h3 id="6-2-安装-Typora"><a href="#6-2-安装-Typora" class="headerlink" title="6.2 安装 Typora"></a><strong>6.2 安装 Typora</strong></h3><p>官网: <a href="https://link.zhihu.com/?target=https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a></p><p>遗憾的是去年 Typora 还是免费的，今年的新版居然开始收费了。</p><p>为此，我为大家准备了旧版免费的安装包</p><p>地址: 「typora-setup-x64(1).exe」<a href="https://link.zhihu.com/?target=https://www.aliyundrive.com/s/1SQzr6JXeR8">https://www.aliyundrive.com/s/1SQzr6JXeR8</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p><h3 id="6-3-写博客"><a href="#6-3-写博客" class="headerlink" title="6.3 写博客"></a><strong>6.3 写博客</strong></h3><p>1、在 D:\hexo 目录下，通过输入命令: <code>hexo new &quot;文章 title&quot;</code> 会在 &#x2F;source 文件夹下生成对应文章的 .md 文件，然后就可以通过 Typora 打开此文件编写文章并保存了</p><p>2、当您写完该篇文章后，依次输入以下命令:</p><p><code>hexo clean</code> 删除 public 文件夹，即删除旧的博客文章</p><p><code>hexo g</code> 生成 public 文件夹，即生成新的博客文章相关 html 文件</p><p><code>hexo d</code> 将博客推送到 github</p><h3 id="6-4-向-Hexo-博客中插入图片"><a href="#6-4-向-Hexo-博客中插入图片" class="headerlink" title="6.4 向 Hexo 博客中插入图片"></a><strong>6.4 向 Hexo 博客中插入图片</strong></h3><p>Hexo 有多种图片插入方式，可以将图片存放在本地引用或者将图片放在 CDN 上引用。</p><p>1、本地引用–绝对路径</p><p>当 Hexo 项目中只用到少量图片时，可以将图片统一放在 source&#x2F;images 文件夹中，通过 markdown 语法访问它们。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![可以写关于图片的描述](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><p>2、本地引用–相对路径</p><p>图片除了可以放在统一的 images 文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置 _config.yml 来生成。</p><p>打开项目根目录中的 *_config.yml 文件，将 _config.yml文件中的配置项 post_asset_folder 设为 true 后，执行命令 <code>hexo new &quot;post_name&quot;</code>，在 source&#x2F;*posts 中会生成文章 post_name.md 和同名文件夹 post_name。</p><p><img src="https://pic4.zhimg.com/80/v2-b765fd8ede9ac481971bf71f1323f13f_720w.webp" alt="img"></p><p>将图片资源放在 post_name 文件夹中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>但是使用这种引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法(<strong>推荐使用这种引用方法</strong>)。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><p>3、CDN 引用(<strong>不推荐</strong>)</p><p>除了在本地存储图片，还可以将图片上传到一些免费的 CDN 服务中。</p><p>比如<a href="https://link.zhihu.com/?target=https://cloudinary.com/">Cloudinary</a> （梯子访问）提供的图片CDN服务，在 Cloudinary 中上传图片后，会生成对应的 url 地址，将地址直接拿来引用即可。或者上传到<a href="https://link.zhihu.com/?target=https://imgchr.com/">路过图床</a>（不用梯子）。</p><blockquote><p><strong>本文来源于 <a href="https://zhuanlan.zhihu.com/p/547520780">https://zhuanlan.zhihu.com/p/547520780</a></strong> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
